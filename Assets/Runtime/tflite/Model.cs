// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace tflite
{

using global::System;
using global::FlatBuffers;

public struct Model : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_11_1(); }
  public static Model GetRootAsModel(ByteBuffer _bb) { return GetRootAsModel(_bb, new Model()); }
  public static Model GetRootAsModel(ByteBuffer _bb, Model obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool ModelBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "TFL3"); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Model __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Version { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public tflite.OperatorCode? OperatorCodes(int j) { int o = __p.__offset(6); return o != 0 ? (tflite.OperatorCode?)(new tflite.OperatorCode()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int OperatorCodesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public tflite.SubGraph? Subgraphs(int j) { int o = __p.__offset(8); return o != 0 ? (tflite.SubGraph?)(new tflite.SubGraph()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int SubgraphsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string Description { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetDescriptionArray() { return __p.__vector_as_array<byte>(10); }
  public tflite.Buffer? Buffers(int j) { int o = __p.__offset(12); return o != 0 ? (tflite.Buffer?)(new tflite.Buffer()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int BuffersLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int MetadataBuffer(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int MetadataBufferLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetMetadataBufferBytes() { return __p.__vector_as_span<int>(14, 4); }
#else
  public ArraySegment<byte>? GetMetadataBufferBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public int[] GetMetadataBufferArray() { return __p.__vector_as_array<int>(14); }
  public tflite.Metadata? Metadata(int j) { int o = __p.__offset(16); return o != 0 ? (tflite.Metadata?)(new tflite.Metadata()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int MetadataLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<tflite.Model> CreateModel(FlatBufferBuilder builder,
      uint version = 0,
      VectorOffset operator_codesOffset = default(VectorOffset),
      VectorOffset subgraphsOffset = default(VectorOffset),
      StringOffset descriptionOffset = default(StringOffset),
      VectorOffset buffersOffset = default(VectorOffset),
      VectorOffset metadata_bufferOffset = default(VectorOffset),
      VectorOffset metadataOffset = default(VectorOffset)) {
    builder.StartTable(7);
    Model.AddMetadata(builder, metadataOffset);
    Model.AddMetadataBuffer(builder, metadata_bufferOffset);
    Model.AddBuffers(builder, buffersOffset);
    Model.AddDescription(builder, descriptionOffset);
    Model.AddSubgraphs(builder, subgraphsOffset);
    Model.AddOperatorCodes(builder, operator_codesOffset);
    Model.AddVersion(builder, version);
    return Model.EndModel(builder);
  }

  public static void StartModel(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddVersion(FlatBufferBuilder builder, uint version) { builder.AddUint(0, version, 0); }
  public static void AddOperatorCodes(FlatBufferBuilder builder, VectorOffset operatorCodesOffset) { builder.AddOffset(1, operatorCodesOffset.Value, 0); }
  public static VectorOffset CreateOperatorCodesVector(FlatBufferBuilder builder, Offset<tflite.OperatorCode>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateOperatorCodesVectorBlock(FlatBufferBuilder builder, Offset<tflite.OperatorCode>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartOperatorCodesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSubgraphs(FlatBufferBuilder builder, VectorOffset subgraphsOffset) { builder.AddOffset(2, subgraphsOffset.Value, 0); }
  public static VectorOffset CreateSubgraphsVector(FlatBufferBuilder builder, Offset<tflite.SubGraph>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSubgraphsVectorBlock(FlatBufferBuilder builder, Offset<tflite.SubGraph>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartSubgraphsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset descriptionOffset) { builder.AddOffset(3, descriptionOffset.Value, 0); }
  public static void AddBuffers(FlatBufferBuilder builder, VectorOffset buffersOffset) { builder.AddOffset(4, buffersOffset.Value, 0); }
  public static VectorOffset CreateBuffersVector(FlatBufferBuilder builder, Offset<tflite.Buffer>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateBuffersVectorBlock(FlatBufferBuilder builder, Offset<tflite.Buffer>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartBuffersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMetadataBuffer(FlatBufferBuilder builder, VectorOffset metadataBufferOffset) { builder.AddOffset(5, metadataBufferOffset.Value, 0); }
  public static VectorOffset CreateMetadataBufferVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateMetadataBufferVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartMetadataBufferVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMetadata(FlatBufferBuilder builder, VectorOffset metadataOffset) { builder.AddOffset(6, metadataOffset.Value, 0); }
  public static VectorOffset CreateMetadataVector(FlatBufferBuilder builder, Offset<tflite.Metadata>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMetadataVectorBlock(FlatBufferBuilder builder, Offset<tflite.Metadata>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartMetadataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<tflite.Model> EndModel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<tflite.Model>(o);
  }
  public static void FinishModelBuffer(FlatBufferBuilder builder, Offset<tflite.Model> offset) { builder.Finish(offset.Value, "TFL3"); }
  public static void FinishSizePrefixedModelBuffer(FlatBufferBuilder builder, Offset<tflite.Model> offset) { builder.FinishSizePrefixed(offset.Value, "TFL3"); }
};


}
