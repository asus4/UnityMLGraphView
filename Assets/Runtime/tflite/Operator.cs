// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace tflite
{

using global::System;
using global::FlatBuffers;

public struct Operator : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_11_1(); }
  public static Operator GetRootAsOperator(ByteBuffer _bb) { return GetRootAsOperator(_bb, new Operator()); }
  public static Operator GetRootAsOperator(ByteBuffer _bb, Operator obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Operator __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint OpcodeIndex { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public int Inputs(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int InputsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetInputsBytes() { return __p.__vector_as_span<int>(6, 4); }
#else
  public ArraySegment<byte>? GetInputsBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public int[] GetInputsArray() { return __p.__vector_as_array<int>(6); }
  public int Outputs(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int OutputsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetOutputsBytes() { return __p.__vector_as_span<int>(8, 4); }
#else
  public ArraySegment<byte>? GetOutputsBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetOutputsArray() { return __p.__vector_as_array<int>(8); }
  public tflite.BuiltinOptions BuiltinOptionsType { get { int o = __p.__offset(10); return o != 0 ? (tflite.BuiltinOptions)__p.bb.Get(o + __p.bb_pos) : tflite.BuiltinOptions.NONE; } }
  public TTable? BuiltinOptions<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(12); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public byte CustomOptions(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int CustomOptionsLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCustomOptionsBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetCustomOptionsBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetCustomOptionsArray() { return __p.__vector_as_array<byte>(14); }
  public tflite.CustomOptionsFormat CustomOptionsFormat { get { int o = __p.__offset(16); return o != 0 ? (tflite.CustomOptionsFormat)__p.bb.GetSbyte(o + __p.bb_pos) : tflite.CustomOptionsFormat.FLEXBUFFERS; } }
  public bool MutatingVariableInputs(int j) { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(__p.__vector(o) + j * 1) : false; }
  public int MutatingVariableInputsLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<bool> GetMutatingVariableInputsBytes() { return __p.__vector_as_span<bool>(18, 1); }
#else
  public ArraySegment<byte>? GetMutatingVariableInputsBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public bool[] GetMutatingVariableInputsArray() { return __p.__vector_as_array<bool>(18); }
  public int Intermediates(int j) { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int IntermediatesLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetIntermediatesBytes() { return __p.__vector_as_span<int>(20, 4); }
#else
  public ArraySegment<byte>? GetIntermediatesBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public int[] GetIntermediatesArray() { return __p.__vector_as_array<int>(20); }

  public static Offset<tflite.Operator> CreateOperator(FlatBufferBuilder builder,
      uint opcode_index = 0,
      VectorOffset inputsOffset = default(VectorOffset),
      VectorOffset outputsOffset = default(VectorOffset),
      tflite.BuiltinOptions builtin_options_type = tflite.BuiltinOptions.NONE,
      int builtin_optionsOffset = 0,
      VectorOffset custom_optionsOffset = default(VectorOffset),
      tflite.CustomOptionsFormat custom_options_format = tflite.CustomOptionsFormat.FLEXBUFFERS,
      VectorOffset mutating_variable_inputsOffset = default(VectorOffset),
      VectorOffset intermediatesOffset = default(VectorOffset)) {
    builder.StartTable(9);
    Operator.AddIntermediates(builder, intermediatesOffset);
    Operator.AddMutatingVariableInputs(builder, mutating_variable_inputsOffset);
    Operator.AddCustomOptions(builder, custom_optionsOffset);
    Operator.AddBuiltinOptions(builder, builtin_optionsOffset);
    Operator.AddOutputs(builder, outputsOffset);
    Operator.AddInputs(builder, inputsOffset);
    Operator.AddOpcodeIndex(builder, opcode_index);
    Operator.AddCustomOptionsFormat(builder, custom_options_format);
    Operator.AddBuiltinOptionsType(builder, builtin_options_type);
    return Operator.EndOperator(builder);
  }

  public static void StartOperator(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddOpcodeIndex(FlatBufferBuilder builder, uint opcodeIndex) { builder.AddUint(0, opcodeIndex, 0); }
  public static void AddInputs(FlatBufferBuilder builder, VectorOffset inputsOffset) { builder.AddOffset(1, inputsOffset.Value, 0); }
  public static VectorOffset CreateInputsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateInputsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartInputsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOutputs(FlatBufferBuilder builder, VectorOffset outputsOffset) { builder.AddOffset(2, outputsOffset.Value, 0); }
  public static VectorOffset CreateOutputsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateOutputsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartOutputsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBuiltinOptionsType(FlatBufferBuilder builder, tflite.BuiltinOptions builtinOptionsType) { builder.AddByte(3, (byte)builtinOptionsType, 0); }
  public static void AddBuiltinOptions(FlatBufferBuilder builder, int builtinOptionsOffset) { builder.AddOffset(4, builtinOptionsOffset, 0); }
  public static void AddCustomOptions(FlatBufferBuilder builder, VectorOffset customOptionsOffset) { builder.AddOffset(5, customOptionsOffset.Value, 0); }
  public static VectorOffset CreateCustomOptionsVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateCustomOptionsVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartCustomOptionsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddCustomOptionsFormat(FlatBufferBuilder builder, tflite.CustomOptionsFormat customOptionsFormat) { builder.AddSbyte(6, (sbyte)customOptionsFormat, 0); }
  public static void AddMutatingVariableInputs(FlatBufferBuilder builder, VectorOffset mutatingVariableInputsOffset) { builder.AddOffset(7, mutatingVariableInputsOffset.Value, 0); }
  public static VectorOffset CreateMutatingVariableInputsVector(FlatBufferBuilder builder, bool[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddBool(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateMutatingVariableInputsVectorBlock(FlatBufferBuilder builder, bool[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartMutatingVariableInputsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddIntermediates(FlatBufferBuilder builder, VectorOffset intermediatesOffset) { builder.AddOffset(8, intermediatesOffset.Value, 0); }
  public static VectorOffset CreateIntermediatesVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateIntermediatesVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartIntermediatesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<tflite.Operator> EndOperator(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<tflite.Operator>(o);
  }
};


}
