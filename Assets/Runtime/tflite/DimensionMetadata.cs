// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace tflite
{

using global::System;
using global::FlatBuffers;

public struct DimensionMetadata : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_11_1(); }
  public static DimensionMetadata GetRootAsDimensionMetadata(ByteBuffer _bb) { return GetRootAsDimensionMetadata(_bb, new DimensionMetadata()); }
  public static DimensionMetadata GetRootAsDimensionMetadata(ByteBuffer _bb, DimensionMetadata obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DimensionMetadata __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public tflite.DimensionType Format { get { int o = __p.__offset(4); return o != 0 ? (tflite.DimensionType)__p.bb.GetSbyte(o + __p.bb_pos) : tflite.DimensionType.DENSE; } }
  public int DenseSize { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ArraySegments(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ArraySegmentsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetArraySegmentsBytes() { return __p.__vector_as_span<int>(8, 4); }
#else
  public ArraySegment<byte>? GetArraySegmentsBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetArraySegmentsArray() { return __p.__vector_as_array<int>(8); }
  public int ArrayIndices(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ArrayIndicesLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetArrayIndicesBytes() { return __p.__vector_as_span<int>(10, 4); }
#else
  public ArraySegment<byte>? GetArrayIndicesBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public int[] GetArrayIndicesArray() { return __p.__vector_as_array<int>(10); }

  public static Offset<tflite.DimensionMetadata> CreateDimensionMetadata(FlatBufferBuilder builder,
      tflite.DimensionType format = tflite.DimensionType.DENSE,
      int dense_size = 0,
      VectorOffset array_segmentsOffset = default(VectorOffset),
      VectorOffset array_indicesOffset = default(VectorOffset)) {
    builder.StartTable(4);
    DimensionMetadata.AddArrayIndices(builder, array_indicesOffset);
    DimensionMetadata.AddArraySegments(builder, array_segmentsOffset);
    DimensionMetadata.AddDenseSize(builder, dense_size);
    DimensionMetadata.AddFormat(builder, format);
    return DimensionMetadata.EndDimensionMetadata(builder);
  }

  public static void StartDimensionMetadata(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddFormat(FlatBufferBuilder builder, tflite.DimensionType format) { builder.AddSbyte(0, (sbyte)format, 0); }
  public static void AddDenseSize(FlatBufferBuilder builder, int denseSize) { builder.AddInt(1, denseSize, 0); }
  public static void AddArraySegments(FlatBufferBuilder builder, VectorOffset arraySegmentsOffset) { builder.AddOffset(2, arraySegmentsOffset.Value, 0); }
  public static VectorOffset CreateArraySegmentsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateArraySegmentsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartArraySegmentsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddArrayIndices(FlatBufferBuilder builder, VectorOffset arrayIndicesOffset) { builder.AddOffset(3, arrayIndicesOffset.Value, 0); }
  public static VectorOffset CreateArrayIndicesVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateArrayIndicesVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartArrayIndicesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<tflite.DimensionMetadata> EndDimensionMetadata(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<tflite.DimensionMetadata>(o);
  }
};


}
