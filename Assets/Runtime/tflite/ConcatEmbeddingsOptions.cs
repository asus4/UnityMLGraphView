// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace tflite
{

using global::System;
using global::FlatBuffers;

public struct ConcatEmbeddingsOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_11_1(); }
  public static ConcatEmbeddingsOptions GetRootAsConcatEmbeddingsOptions(ByteBuffer _bb) { return GetRootAsConcatEmbeddingsOptions(_bb, new ConcatEmbeddingsOptions()); }
  public static ConcatEmbeddingsOptions GetRootAsConcatEmbeddingsOptions(ByteBuffer _bb, ConcatEmbeddingsOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ConcatEmbeddingsOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int NumChannels { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int NumColumnsPerChannel(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int NumColumnsPerChannelLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetNumColumnsPerChannelBytes() { return __p.__vector_as_span<int>(6, 4); }
#else
  public ArraySegment<byte>? GetNumColumnsPerChannelBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public int[] GetNumColumnsPerChannelArray() { return __p.__vector_as_array<int>(6); }
  public int EmbeddingDimPerChannel(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int EmbeddingDimPerChannelLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetEmbeddingDimPerChannelBytes() { return __p.__vector_as_span<int>(8, 4); }
#else
  public ArraySegment<byte>? GetEmbeddingDimPerChannelBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetEmbeddingDimPerChannelArray() { return __p.__vector_as_array<int>(8); }

  public static Offset<tflite.ConcatEmbeddingsOptions> CreateConcatEmbeddingsOptions(FlatBufferBuilder builder,
      int num_channels = 0,
      VectorOffset num_columns_per_channelOffset = default(VectorOffset),
      VectorOffset embedding_dim_per_channelOffset = default(VectorOffset)) {
    builder.StartTable(3);
    ConcatEmbeddingsOptions.AddEmbeddingDimPerChannel(builder, embedding_dim_per_channelOffset);
    ConcatEmbeddingsOptions.AddNumColumnsPerChannel(builder, num_columns_per_channelOffset);
    ConcatEmbeddingsOptions.AddNumChannels(builder, num_channels);
    return ConcatEmbeddingsOptions.EndConcatEmbeddingsOptions(builder);
  }

  public static void StartConcatEmbeddingsOptions(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddNumChannels(FlatBufferBuilder builder, int numChannels) { builder.AddInt(0, numChannels, 0); }
  public static void AddNumColumnsPerChannel(FlatBufferBuilder builder, VectorOffset numColumnsPerChannelOffset) { builder.AddOffset(1, numColumnsPerChannelOffset.Value, 0); }
  public static VectorOffset CreateNumColumnsPerChannelVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateNumColumnsPerChannelVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartNumColumnsPerChannelVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEmbeddingDimPerChannel(FlatBufferBuilder builder, VectorOffset embeddingDimPerChannelOffset) { builder.AddOffset(2, embeddingDimPerChannelOffset.Value, 0); }
  public static VectorOffset CreateEmbeddingDimPerChannelVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateEmbeddingDimPerChannelVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartEmbeddingDimPerChannelVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<tflite.ConcatEmbeddingsOptions> EndConcatEmbeddingsOptions(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<tflite.ConcatEmbeddingsOptions>(o);
  }
};


}
