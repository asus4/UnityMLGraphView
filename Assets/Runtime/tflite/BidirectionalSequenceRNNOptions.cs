// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace tflite
{

using global::System;
using global::FlatBuffers;

public struct BidirectionalSequenceRNNOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_11_1(); }
  public static BidirectionalSequenceRNNOptions GetRootAsBidirectionalSequenceRNNOptions(ByteBuffer _bb) { return GetRootAsBidirectionalSequenceRNNOptions(_bb, new BidirectionalSequenceRNNOptions()); }
  public static BidirectionalSequenceRNNOptions GetRootAsBidirectionalSequenceRNNOptions(ByteBuffer _bb, BidirectionalSequenceRNNOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BidirectionalSequenceRNNOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool TimeMajor { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public tflite.ActivationFunctionType FusedActivationFunction { get { int o = __p.__offset(6); return o != 0 ? (tflite.ActivationFunctionType)__p.bb.GetSbyte(o + __p.bb_pos) : tflite.ActivationFunctionType.NONE; } }
  public bool MergeOutputs { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<tflite.BidirectionalSequenceRNNOptions> CreateBidirectionalSequenceRNNOptions(FlatBufferBuilder builder,
      bool time_major = false,
      tflite.ActivationFunctionType fused_activation_function = tflite.ActivationFunctionType.NONE,
      bool merge_outputs = false) {
    builder.StartTable(3);
    BidirectionalSequenceRNNOptions.AddMergeOutputs(builder, merge_outputs);
    BidirectionalSequenceRNNOptions.AddFusedActivationFunction(builder, fused_activation_function);
    BidirectionalSequenceRNNOptions.AddTimeMajor(builder, time_major);
    return BidirectionalSequenceRNNOptions.EndBidirectionalSequenceRNNOptions(builder);
  }

  public static void StartBidirectionalSequenceRNNOptions(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddTimeMajor(FlatBufferBuilder builder, bool timeMajor) { builder.AddBool(0, timeMajor, false); }
  public static void AddFusedActivationFunction(FlatBufferBuilder builder, tflite.ActivationFunctionType fusedActivationFunction) { builder.AddSbyte(1, (sbyte)fusedActivationFunction, 0); }
  public static void AddMergeOutputs(FlatBufferBuilder builder, bool mergeOutputs) { builder.AddBool(2, mergeOutputs, false); }
  public static Offset<tflite.BidirectionalSequenceRNNOptions> EndBidirectionalSequenceRNNOptions(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<tflite.BidirectionalSequenceRNNOptions>(o);
  }
};


}
