// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace tflite
{

using global::System;
using global::FlatBuffers;

public struct SqueezeOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_11_1(); }
  public static SqueezeOptions GetRootAsSqueezeOptions(ByteBuffer _bb) { return GetRootAsSqueezeOptions(_bb, new SqueezeOptions()); }
  public static SqueezeOptions GetRootAsSqueezeOptions(ByteBuffer _bb, SqueezeOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SqueezeOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int SqueezeDims(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int SqueezeDimsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetSqueezeDimsBytes() { return __p.__vector_as_span<int>(4, 4); }
#else
  public ArraySegment<byte>? GetSqueezeDimsBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public int[] GetSqueezeDimsArray() { return __p.__vector_as_array<int>(4); }

  public static Offset<tflite.SqueezeOptions> CreateSqueezeOptions(FlatBufferBuilder builder,
      VectorOffset squeeze_dimsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    SqueezeOptions.AddSqueezeDims(builder, squeeze_dimsOffset);
    return SqueezeOptions.EndSqueezeOptions(builder);
  }

  public static void StartSqueezeOptions(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddSqueezeDims(FlatBufferBuilder builder, VectorOffset squeezeDimsOffset) { builder.AddOffset(0, squeezeDimsOffset.Value, 0); }
  public static VectorOffset CreateSqueezeDimsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateSqueezeDimsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartSqueezeDimsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<tflite.SqueezeOptions> EndSqueezeOptions(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<tflite.SqueezeOptions>(o);
  }
};


}
