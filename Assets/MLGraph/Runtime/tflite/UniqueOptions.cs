// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace tflite
{

using global::System;
using global::FlatBuffers;

public struct UniqueOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_11_1(); }
  public static UniqueOptions GetRootAsUniqueOptions(ByteBuffer _bb) { return GetRootAsUniqueOptions(_bb, new UniqueOptions()); }
  public static UniqueOptions GetRootAsUniqueOptions(ByteBuffer _bb, UniqueOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public UniqueOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public tflite.TensorType IdxOutType { get { int o = __p.__offset(4); return o != 0 ? (tflite.TensorType)__p.bb.GetSbyte(o + __p.bb_pos) : tflite.TensorType.INT32; } }

  public static Offset<tflite.UniqueOptions> CreateUniqueOptions(FlatBufferBuilder builder,
      tflite.TensorType idx_out_type = tflite.TensorType.INT32) {
    builder.StartTable(1);
    UniqueOptions.AddIdxOutType(builder, idx_out_type);
    return UniqueOptions.EndUniqueOptions(builder);
  }

  public static void StartUniqueOptions(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddIdxOutType(FlatBufferBuilder builder, tflite.TensorType idxOutType) { builder.AddSbyte(0, (sbyte)idxOutType, 2); }
  public static Offset<tflite.UniqueOptions> EndUniqueOptions(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<tflite.UniqueOptions>(o);
  }
};


}
