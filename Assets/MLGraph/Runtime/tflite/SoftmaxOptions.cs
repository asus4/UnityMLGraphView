// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace tflite
{

using global::System;
using global::FlatBuffers;

public struct SoftmaxOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_11_1(); }
  public static SoftmaxOptions GetRootAsSoftmaxOptions(ByteBuffer _bb) { return GetRootAsSoftmaxOptions(_bb, new SoftmaxOptions()); }
  public static SoftmaxOptions GetRootAsSoftmaxOptions(ByteBuffer _bb, SoftmaxOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SoftmaxOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Beta { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<tflite.SoftmaxOptions> CreateSoftmaxOptions(FlatBufferBuilder builder,
      float beta = 0.0f) {
    builder.StartTable(1);
    SoftmaxOptions.AddBeta(builder, beta);
    return SoftmaxOptions.EndSoftmaxOptions(builder);
  }

  public static void StartSoftmaxOptions(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddBeta(FlatBufferBuilder builder, float beta) { builder.AddFloat(0, beta, 0.0f); }
  public static Offset<tflite.SoftmaxOptions> EndSoftmaxOptions(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<tflite.SoftmaxOptions>(o);
  }
};


}
