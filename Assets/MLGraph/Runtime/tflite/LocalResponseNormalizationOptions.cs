// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace tflite
{

using global::System;
using global::FlatBuffers;

public struct LocalResponseNormalizationOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_11_1(); }
  public static LocalResponseNormalizationOptions GetRootAsLocalResponseNormalizationOptions(ByteBuffer _bb) { return GetRootAsLocalResponseNormalizationOptions(_bb, new LocalResponseNormalizationOptions()); }
  public static LocalResponseNormalizationOptions GetRootAsLocalResponseNormalizationOptions(ByteBuffer _bb, LocalResponseNormalizationOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LocalResponseNormalizationOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Radius { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float Bias { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Alpha { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Beta { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<tflite.LocalResponseNormalizationOptions> CreateLocalResponseNormalizationOptions(FlatBufferBuilder builder,
      int radius = 0,
      float bias = 0.0f,
      float alpha = 0.0f,
      float beta = 0.0f) {
    builder.StartTable(4);
    LocalResponseNormalizationOptions.AddBeta(builder, beta);
    LocalResponseNormalizationOptions.AddAlpha(builder, alpha);
    LocalResponseNormalizationOptions.AddBias(builder, bias);
    LocalResponseNormalizationOptions.AddRadius(builder, radius);
    return LocalResponseNormalizationOptions.EndLocalResponseNormalizationOptions(builder);
  }

  public static void StartLocalResponseNormalizationOptions(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddRadius(FlatBufferBuilder builder, int radius) { builder.AddInt(0, radius, 0); }
  public static void AddBias(FlatBufferBuilder builder, float bias) { builder.AddFloat(1, bias, 0.0f); }
  public static void AddAlpha(FlatBufferBuilder builder, float alpha) { builder.AddFloat(2, alpha, 0.0f); }
  public static void AddBeta(FlatBufferBuilder builder, float beta) { builder.AddFloat(3, beta, 0.0f); }
  public static Offset<tflite.LocalResponseNormalizationOptions> EndLocalResponseNormalizationOptions(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<tflite.LocalResponseNormalizationOptions>(o);
  }
};


}
